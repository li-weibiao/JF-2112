1、	深入剖析SHELL编程的规范
1）	SHELL编程用途？SHELL编程意义？
主要是用于将重复的、繁杂的工作、任务变成流程化、自动化、简单化，从而提高运维人员的工作效率，节省运维的时间成本；
2）	SHELL编程和SHELL关系？
SHELL是用户和Linux内核之间的沟通的桥梁，接收用户输入的指令，最终可以解析内核返回的数据，返回给用户终端；
3）	SHELL编程的产物是SHELL脚本，SHELL脚本由单个或者多个Linux指令，按照一定的顺序和逻辑关系堆积而成的文本，这些指令将以SHELL解释器去执行；
4）	SHELL编程脚本命名的后缀以.sh结尾，脚本的名称尽量跟内容保持相关性，脚本名称通常没有限制，可以使用大小写字母，不要使用特殊符号，脚本名称之间尽量使用_，不使用-;
5）	SHELL编程代码第一行以#!开头，其后接SHELL解释器的类型，例如#!/bin/sh、#!/bin/bash（表示强调和标识，指定脚本的SHELL解释器）等，除了第一行#开头之外，其余行的#通常表示注释和说明的意义；
6）	SHELL编程代码从上往下编写，每一行编写一个指令或者指令集，脚本代码执行的顺序从上往下，尽量添加脚本指令的注释和说明（方便自己和他人后期查阅）；
7）	SHELL编程尽量保持语法的对称关系，SHELL指令的缩进，尤其使用if、for、while、case语法时，添加缩进，使SHELL代码更加的美观；
8）	SHELL编程时，尽量添加变量，好处是可以便于后期的维护和管理，可以将重复的字符设置为变量，利于脚本代码的可读性和美观；
9）	SHELL编程变量定义名称以大小写字母开头，不能使用数字开头，尽量使用大写字母，不推荐使用小写字母定义变量名，变量名称之间不能使用-（横杠），推荐使用_（下划线），变量定义尽量跟变量值保持相关性；
2、	深入剖析SHELL编程的技巧
1）	熟练掌握SHELL编程的规范，把编程规范时刻记心中，养成良好的编程习惯；
2）	编写SHELL脚本时，先思考脚本用途，能够做什么？能够给工作提升哪些效率？通过手工的方式如何实现，实现的整个过程是什么？
3）	编写SHELL脚本之前，先把手工的实验在测试环境（机器）操作一遍（熟练），把手工实施的步骤尽量记下来（写下来），关注重点的参数和指令操作；
4）	初学者，使用SHELL编程第一个脚本（版本）时，将手工方式代码堆积在脚本文件中（养成编写的习惯），将第一个脚本脚本编写完毕，不断的对脚本进行深入的优化；
5）	检查脚本执行时可能产生依赖关系或者错误；
6）	将重复的字符、编程语句尽量使用变量进行替换；
7）	设想脚本是否需要添加判断、if条件判断，多做假设条件；
8）	引入更多高级的语法、指令，使SHELL脚本效率更高、完整；
3、	编写Vsftpd虚拟用户，任意单个用户添加（编程思路）
	基于YUM方式部署Vsftpd FTP服务；
	创建虚拟用户+密码信息文件列表，ftpusers.txt;
	基于DB_LOAD数据库工具生成vsftpd_login.db库；
	Chmod加密ftpuser.txt和vsftpd_login.db库文件；
	创建虚拟用户的映射用户（系统用户）：ftpuser；
	创建虚拟用户认证模块：/etc/pam.d/vsftpd（配置）；
	vim /etc/vsftpd/vsftpd.conf添加虚拟用户的支持；
	创建虚拟用户-主配置文件（设置虚拟用户的权限）；
	/home/ftpuser/创建以虚拟用户名称命名的文件夹，并且授权ftpuser用户能够访问；
	重启Vsftpd服务，通过客户端验证虚拟用户的登录情况；
	实现任意单个用户添加，将虚拟用户设置为$1位置变量；
4、	For循环语句编程实战
1）	For循环是SHELL编程比较常见的语法，熟练掌握For循环能够提升SHELL编程的能力，提高SHELL脚本的功能；
2）	For循环语法的格式：
for i（变量） in  列表内容
do
	command；
done
3）	FOR循环案例演练一：
 
4）	SSH免秘钥配置方法：
服务端执行如下指令：
ssh-keygen（生成一对秘钥，公钥-锁和私钥-钥匙）
ssh-copy-id -i /root/.ssh/id_rsa.pub 192.168.0.100（远程IP）
（其中0.100为客户端命令，表示将服务端的公钥拷贝至远程客户端）

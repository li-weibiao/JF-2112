JF2112班DAY-08课程笔记
1.1 	Parted 分区
Parted 分区格式：gpt
	1）将硬盘所有内容分到一个分区
 
将2.4T 硬盘分区操作
 
 
-1 参数：代表剩下的所有空间。
Parted工具中的mklabel 和mkpart 参数
 

1.2 	mount命令实例
Mount常用案例演示如下：
mount  	/dev/sdb1    	     	/data 			挂载/dev/sdb1分区至/data/目录
mount 	/dev/cdrom   		/mnt 			挂载Cdrom光盘至/mnt目录；
mount 	-t ntfs-3g   		/dev/sdc  	/data1	挂载/dev/sdc移动硬盘至/data1目录；
mount   -o    remount,rw    	/ 		  	重新以读写模式挂载/系统；
mount 	-t  iso9660  -o loop  centos7.iso /mnt	将centos7.iso镜像文件挂载至/mnt目录；
mount   -t fat32   /dev/sdd1            /mnt    将U盘/dev/sdd1挂载至/mnt/目录；
mount   -t   nfs   192.168.1.11:/data/    	/mnt	    将远程192.168.1.11:/data目录挂载至本地/mnt目录。

1.3 	文件系统详解
	EXT4是第四代扩展文件系统（Fourth EXtended filesystem，EXT4）是Linux系统下的日志文件系统，是EXT3文件系统的后继版本；
	EXT3类型文件系统支持最大16TB文件系统和最大2TB文件；
	EXT4分别支持1EB（1EB=1024PB，1PB=1024TB）的文件系统，以及16TB的单个文件；
	EXT3只支持32,000个子目录，而EXT4支持无限数量的子目录；
	EXT4磁盘结构的inode个数支持40亿，而且EXT4的单个文件大小支持到16T(4K block size)  ；
	XFS是一个64位文件系统，最大支持8EB减1字节的单个文件系统，实际部署时取决于宿主操作系统的最大块限制，常用语64位操作系统，发挥更好的性能；
	XFS一种高性能的日志文件系统，最早于1993年，由Silicon Graphics为他们的IRIX操作系统而开发，是IRIX 5.3版的默认文件系统；
1.4 	Swap分区的扩展
dd 命令创建一个空文件，if指定一个来源/dev/zero（/dev/zero文件提供源源不断的“0”数据），of指定存储文件，bs=定义块的大小，count=定义块的数量
[root@localhost ~]# dd if=/dev/zero of=/root/test bs=100M count=20
20+0 records in
20+0 records out
2097152000 bytes (2.1 GB) copied, 42.9902 s, 48.8 MB/s
 [root@localhost ~]# mkswap  /root/test 
Setting up swapspace version 1, size = 2047996 KiB
no label, UUID=13db4d1a-eb96-49fc-8e29-33e51c660ea5
 [root@localhost ~]# free -hm
              total        used        free      shared  buff/cache   available
Mem:           976M        113M        170M        6.7M        692M        686M
Swap:          2.0G          0B        2.0G
[root@localhost ~]# swapon /root/test
swapon: /root/test: insecure permissions 0644, 0600 suggested.
[root@localhost ~]# free -hm
              total        used        free      shared  buff/cache   available
Mem:           976M        115M        168M        6.7M        692M        684M
Swap:          4.0G          0B        4.0G
[root@localhost ~]#
[root@localhost ~]# swapoff  /root/test 
[root@localhost ~]# 
[root@localhost ~]# free -m 
total   used        free      shared  buff/cache   available
Mem:   976        114         168    6      693         685
Swap:   2047           0        2047
1.5 	使用xfs文件系统superblock实验
1. 创建一个XFS文件系统
[root@localhost ~]# mkfs.xfs -f /dev/sdb1
meta-data=/dev/sdb1              isize=256    agcount=4, agsize=1966102 blks
         =                       sectsz=512   attr=2, projid32bit=0
data     =                       bsize=4096   blocks=7864408, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0
log      =internal log           bsize=4096   blocks=3840, version=2
         =                       sectsz=512   sunit=0 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0

[root@localhost ~]# cat /etc/fstab |grep sdsb1
/dev/sdb1     /test     xfs     defaults     0 0

[root@localhost ~]# mount -a

[root@localhost ~]# df -h
/dev/sdb1                         30G  610M   30G   2% /test
2. 卸载文件系统/test, 并且破坏superblock
[root@localhost ~]# umount /test
[root@localhost ~]# dd if=/dev/zero of=/dev/sdb1 bs=512 count=1
1+0 records in
1+0 records out
512 bytes (512 B) copied, 0.00251096 s, 204 kB/s

3. 再次挂载报错
[root@localhost ~]# mount -a
mount: wrong fs type, bad option, bad superblock on /dev/sdb1,
       missing codepage or helper program, or other error
       In some cases useful info is found in syslog - try
       dmesg | tail  or so

[root@localhost ~]# dmesg
[22597379.623449] XFS (sdb1): bad magic number
[22597379.624372] XFS (sdb1): SB validate failed
4. 恢复superblock
[root@localhost ~]# xfs_repair /dev/sdb1
Phase 1 - find and verify superblock...
bad primary superblock - bad magic number !!!

attempting to find secondary superblock...
.........found candidate secondary superblock...
verified secondary superblock...
writing modified primary superblock
sb realtime bitmap inode 18446744073709551615 (NULLFSINO) inconsistent with calculated value 129
resetting superblock realtime bitmap ino pointer to 129
sb realtime summary inode 18446744073709551615 (NULLFSINO) inconsistent with calculated value 130
resetting superblock realtime summary ino pointer to 130
Phase 2 - using internal log
        - zero log...
        - scan filesystem freespace and inode maps...
sb_icount 0, counted 64
sb_ifree 0, counted 60
sb_fdblocks 7860552, counted 7712768
        - found root inode chunk
Phase 3 - for each AG...
        - scan and clear agi unlinked lists...
        - process known inodes and perform inode discovery...
        - agno = 0
        - agno = 1
        - agno = 2
        - agno = 3
        - process newly discovered inodes...
Phase 4 - check for duplicate blocks...
        - setting up duplicate extent list...
        - check for inodes claiming duplicate blocks...
        - agno = 0
        - agno = 1
        - agno = 2
        - agno = 3
Phase 5 - rebuild AG headers and trees...
        - reset superblock...
Phase 6 - check inode connectivity...
        - resetting contents of realtime bitmap and summary inodes
        - traversing filesystem ...
        - traversal finished ...
        - moving disconnected inodes to lost+found ...
Phase 7 - verify and correct link counts...
Note - stripe unit (0) and width (0) fields have been reset.
Please set with mount -o sunit=<value>,swidth=<value>
done

5. 确认是否已经恢复
[root@localhost ~]# mount -a
[root@localhost ~]# df -h
/dev/sdb1                         30G  610M   30G   2% /test


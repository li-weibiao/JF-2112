JF2112班Linux基础篇回顾

1、	Linux基础技能回顾一
1）	生产环境中，YUM和MAKE源码编译均会使用，到底什么场合使用什么工具呢？
	YUM二进制方式：基础的服务、无需定制需求、库文件；
	MAKE源码编译：核心的服务、定制化需求高、可控性高；
2）	Linux平台下源代码软件部署方式：
	官网下载稳定软件包，不建议使用最新版本（tar、tar.gz、tar.bz2）；
	源码包通过tar工具打包+压缩，tar命令解压缩，tar –xzvf xxx.tar.gz（-x解压get、z gzip类型、v verbose详细过程、-f file 文件属性）；
	预编译，./configure --prefix=/usr/local/software/|cmake；
检查Linux系统安装该软件包所需的依赖环境、库文件，检查系统是否存在GCC编译器，指定软件预安装的路径、定制功能和模块，生成makefile文件；
	编译，make
Make本身是一个编译工具，读取makefile文件，根据makefile文件中源码文件编排的顺序，调用Linux系统的GCC编译器，将源代码文件编译生成二进制文件；
（Makefile文件用途：告诉make工具从哪个文件开始编译，到哪个文件结束编译，涉及到的依赖库文件关系信息）；
	安装，make install
将第二步make产生的二进制文件，拷贝或者安装至Linux系统指定的安装目录（--prefix=/usr/local/software/）；
	启动服务，/usr/local/software/bin/xxxx
3）	作为运维工程师，除了Linux系统日常操作管理之外，最重要的工作部署和维护各种应用软件；
4）	FTP文件传输协议&Vsftpd软件实战：
	FTP是文件传输协议，FTP使用时，遵循C/S（Client/Server）客户端和服务端模式；
	FTP文件传输两种模式：主动模式、被动模式，主动模式和被动模式均是以FTP服务端为参照物；
	Vsftpd是FTP服务端软件，对外访问的方式三种：匿名用户、系统用户、虚拟用户；
	Vsftpd虚拟用户实战（排错思路）步骤：
创建虚拟用户列表文件（用户名和密码关系）->DB_LOAD生成登录数据库->控制用户文件&数据库文件权限->配置PAM认证模块->主配置文件开启虚拟用户支持->创建系统用户&虚拟用户映射->创建每个虚拟用户配置文件->/home/ftpuser/虚拟用户家目录->授权虚拟用户文件夹权限->临时关闭防火墙&Selinux安全策略->客户端验证访问；
5）	Apache WEB软件实战：
	Apache是什么？使用最多的WEB软件，发布网站程序（开发人员）；
	网站程序，被称为网站代码，实现企业产品需求，代表企业产品、门户产品（门户企业的门面，主要的产品）；
	Apache只能发布+处理静态网页，不能直接发布动态网页，动态网页交给第三方软件程序去处理；
	静态网页
跟后端数据库不发生交互的网页，不连接、涉及后端数据库的，而且网页的内容很少更新或者几乎不更新，典型的页面命名后缀：.htm、.html等；
	动态网页
跟后端数据库发生交互的网页，连接、涉及后端数据库的，而且网页的内容经常更新或者随着数据库的内容变化而更新，典型的页面命名后缀：.php、.jsp、.do、.asp、.cgi等；
	Apache WEB软件三种MPM工作处理引擎：Prefork、Worker、Event，通常Apache默认引擎Prefork模式，生产环境使用最多的两种模式：Prefork和Worker；
	Prefork模式
预启动时，由Master进程生成多个工作进程，每个工作进程只有一个线程，线程在某一时刻只能处理一个连接请求，如果用户访问并发高，Apache预派生N个工作进程（必须启动大量的工作进程），稳定、占CPU、负载、内存资源高，一个进程奔溃，不会影响其他的工作进程，进程之间是相互独立的，互不影响的；
	Worker模式
预启动时，由Master进程生成多个工作进程，每个工作进程会生成多个线程，每个线程在某一时刻只能处理一个连接请求，如果用户访问并发高，Apache预派生N个工作进程（不必启动大量的工作进程），进程会生成N个线程，稳定、占CPU、负载、内存资源小，但是所有的线程共享进程的内存空间，相同的生命周期，一旦一个线程奔溃，该线程连同进程下其他的线程奔溃退出，但是不会影响其他的进程；
6）	Zabbix监控软件实战：
	Zabbix是开源、免费的、WEB界面方式、分布式的、7x24小时的监控软件；
	可以监控IT设备、业务系统、门户网站、数据库系统高效稳定的运行，监控的层面：硬件层面、软件层面、系统层面、网络层面；
	硬件层面
可以监控硬件服务器：风扇转速、CPU温度、硬盘温度、电源异常、机箱是否被入侵等；
	软件层面
可以监控Linux或者Windows各个软件程序：Apache、MYSQL、PHP、JAVA运行状态、进程PID、端口号、状态码、返回值等；
	系统层面
可以监控Windows/Linux操作系统各个资源：CPU使用率、内存、硬盘容量、I/O、网卡流量、进程数、登录用户数、文件打开数等；
	网络层面
可以监控防火墙、路由器、交换机网络设备运行状态、出口和入口流量、网络的连通性、打印机设备等；
	Zabbix监控平台必备的组件：Zabbix-Server、Zabbix-Web、Zabbix-Proxy、Zabbix-Database、Zabbix-Client，每个组件的详细功能如下：
	Zabbix-Server
是整个监控平台核心组件，独立的后台服务，Server端，负责收集和汇总客户端的监控数据，并且持久化存储到DB中，Server端发起扫描和探测，可以接受客户端的自动注册；
	Zabbix-Web
基于PHP语言开发的WEB界面，主要是方便管理员对监控平台更加便捷的配置、操作、数据报表统计、审计等，而且WEB可以读取DB中客户端监控数据，通过动态图像进行直观的展示；
	Zabbix-Proxy
被称为代理的节点，分布式的节点，主要是代替Server老大去采集和汇总客户端的监控数据，并且定时将汇总的数据上报给Server，最终由Server进行数据整合，如果监控的服务器众多，可以开启多台Proxy；
	Zabbix-Database
关系型数据库系统，例如MYSQL|Mariadb|DB2|Oracle，主要是用于存储整个平台用户和密码认证信息、持久化存储所有的客户端的监控数据；
	Zabbix-Client
被称为客户端，被监控端，被监控的对象通常会部署监控插件（SNMP、Agent），通过自身的插件监控自身的各项指标数据（CPU使用率、内存使用、硬盘容量、I/O、网络流量等），自己采集本地的数据，定时上报给Proxy或Server；
	Zabbix工作方式C/S模式，客户端和服务端，服务器去采集和汇总数据，监控方式：SNMP、Agent、IPMI等；（SNMP和Agent使用最多的）；
	Zabbix数据采集的时候分为：主动模式和被动模式，主被动模式以客户端（Agent）为参考；



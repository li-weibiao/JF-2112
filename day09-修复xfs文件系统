JF2112班DAY-09课程笔记
1.1 	使用xfs文件系统superblock实验
1. 创建一个XFS文件系统
[root@localhost ~]# mkfs.xfs -f /dev/sdb1
meta-data=/dev/sdb1              isize=256    agcount=4, agsize=1966102 blks
         =                       sectsz=512   attr=2, projid32bit=0
data     =                       bsize=4096   blocks=7864408, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0
log      =internal log           bsize=4096   blocks=3840, version=2
         =                       sectsz=512   sunit=0 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0

[root@localhost ~]# cat /etc/fstab |grep sdsb1
/dev/sdb1     /test     xfs     defaults     0 0

[root@localhost ~]# mount -a

[root@localhost ~]# df -h
/dev/sdb1                         30G  610M   30G   2% /test
2. 卸载文件系统/test, 并且破坏superblock
[root@localhost ~]# umount /test
[root@localhost ~]# dd if=/dev/zero of=/dev/sdb1 bs=512 count=1
1+0 records in
1+0 records out
512 bytes (512 B) copied, 0.00251096 s, 204 kB/s

3. 再次挂载报错
[root@localhost ~]# mount -a
mount: wrong fs type, bad option, bad superblock on /dev/sdb1,
       missing codepage or helper program, or other error
       In some cases useful info is found in syslog - try
       dmesg | tail  or so

[root@localhost ~]# dmesg
[22597379.623449] XFS (sdb1): bad magic number
[22597379.624372] XFS (sdb1): SB validate failed
4. 恢复superblock
xfs_repair 此为XFS系统恢复和修改文件系统工具 (ext系列工具为fsck)
[root@localhost ~]# xfs_repair /dev/sdb1
Phase 1 - find and verify superblock...
bad primary superblock - bad magic number !!!

attempting to find secondary superblock...
.........found candidate secondary superblock...
verified secondary superblock...
writing modified primary superblock
sb realtime bitmap inode 18446744073709551615 (NULLFSINO) inconsistent with calculated value 129
resetting superblock realtime bitmap ino pointer to 129
sb realtime summary inode 18446744073709551615 (NULLFSINO) inconsistent with calculated value 130
resetting superblock realtime summary ino pointer to 130
Phase 2 - using internal log
        - zero log...
        - scan filesystem freespace and inode maps...
sb_icount 0, counted 64
sb_ifree 0, counted 60
sb_fdblocks 7860552, counted 7712768
        - found root inode chunk
Phase 3 - for each AG...
        - scan and clear agi unlinked lists...
        - process known inodes and perform inode discovery...
        - agno = 0
        - agno = 1
        - agno = 2
        - agno = 3
        - process newly discovered inodes...
Phase 4 - check for duplicate blocks...
        - setting up duplicate extent list...
        - check for inodes claiming duplicate blocks...
        - agno = 0
        - agno = 1
        - agno = 2
        - agno = 3
Phase 5 - rebuild AG headers and trees...
        - reset superblock...
Phase 6 - check inode connectivity...
        - resetting contents of realtime bitmap and summary inodes
        - traversing filesystem ...
        - traversal finished ...
        - moving disconnected inodes to lost+found ...
Phase 7 - verify and correct link counts...
Note - stripe unit (0) and width (0) fields have been reset.
Please set with mount -o sunit=<value>,swidth=<value>
done

5. 确认是否已经恢复
[root@localhost ~]# mount -a
[root@localhost ~]# df -h
/dev/sdb1                         30G  610M   30G   2% /test









1.2 	修复ext4分区superblock 问题
[root@localhost ~]# df -h 
Filesystem               Size  Used Avail Use% Mounted on
/dev/mapper/centos-root   17G  1.7G   16G  10% /
devtmpfs                 478M     0  478M   0% /dev
tmpfs                    489M     0  489M   0% /dev/shm
tmpfs                    489M  6.7M  482M   2% /run
tmpfs                    489M     0  489M   0% /sys/fs/cgroup
/dev/sda1               1014M  127M  888M  13% /boot
tmpfs                     98M     0   98M   0% /run/user/0
/dev/sdb                  20G   33M   20G   1% /test
/dev/sdc1                 20G   44M   19G   1% /test1
[root@localhost ~]# umount /test1 
[root@localhost ~]# !dd
dd if=/dev/zero of=/dev/sdc1  bs=100M count=10
10+0 records in
10+0 records out
1048576000 bytes (1.0 GB) copied, 1.72432 s, 608 MB/s
 [root@localhost ~]# mount -a 
mount: wrong fs type, bad option, bad superblock on /dev/sdc1,
       missing codepage or helper program, or other error

       In some cases useful info is found in syslog - try
       dmesg | tail or so.
 [root@localhost ~]# fsck -t ext4 /dev/sdc1
fsck from util-linux 2.23.2
e2fsck 1.42.9 (28-Dec-2013)
ext2fs_open2: Bad magic number in super-block
fsck.ext4: Superblock invalid, trying backup blocks...
fsck.ext4: Bad magic number in super-block while trying to open /dev/sdc1

The superblock could not be read or does not describe a correct ext2
filesystem.  If the device is valid and it really contains an ext2
filesystem (and not swap or ufs or something else), then the superblock
is corrupt, and you might try running e2fsck with an alternate superblock:
    e2fsck -b 8193 <device>

[root@localhost ~]# mke2fs  -S /dev/sdc1
-S 仅写入superblock与group descriptors
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
1310720 inodes, 5242631 blocks
262131 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=4294967296
160 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks: 
	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 
	4096000

Allocating group tables: done                            
Writing superblocks and filesystem accounting information: done   

[root@localhost ~]# mount /dev/sdc1
mount: mount /dev/sdc1 on /test1 failed: Stale file handle
[root@localhost ~]#
[root@localhost ~]# fsck -t ext4 -y /dev/sdc1
检查特定类型的文件系统（ext4），-y检测完成之后并自动修复
fsck from util-linux 2.23.2
e2fsck 1.42.9 (28-Dec-2013)
/dev/sdc1 contains a file system with errors, check forced.
Resize inode not valid.  Recreate? yes
Pass 1: Checking inodes, blocks, and sizes
Root inode is not a directory.  Clear? yes
Pass 2: Checking directory structure
Pass 3: Checking directory connectivity
Root inode not allocated.  Allocate? ye
/lost+found not found.  Create? yes
Pass 4: Checking reference counts
Pass 5: Checking group summary information
Block bitmap differences:  +(0--1539) +(32768--34306) +(65536--66049) +(98304--99842) +(131072--131585) +(163840--165378) +(196608--197121) +(229376--230914)
Fix? yes
Free blocks count wrong for group #0 (31227, counted=31226).
Fix? yes
Free blocks count wrong (5149114, counted=5149113).
Fix? yes
Inode bitmap differences:  +1 +(3--10)
Fix? yes
Free inodes count wrong for group #0 (8191, counted=8181).
Fix? yes
Directories count wrong for group #0 (1, counted=2).
Fix? yes
Free inodes count wrong (1310719, counted=1310709).
Fix? yes
/dev/sdc1: ***** FILE SYSTEM WAS MODIFIED *****
/dev/sdc1: 11/1310720 files (0.0% non-contiguous), 93518/5242631 block
[root@localhost ~]# df -h 
Filesystem               Size  Used Avail Use% Mounted on
/dev/mapper/centos-root   17G  1.7G   16G  10% /
devtmpfs                 478M     0  478M   0% /dev
tmpfs                    489M     0  489M   0% /dev/shm
tmpfs                    489M  6.7M  482M   2% /run
tmpfs                    489M     0  489M   0% /sys/fs/cgroup
/dev/sda1               1014M  127M  888M  13% /boot
tmpfs                     98M     0   98M   0% /run/user/0
/dev/sdb                  20G   33M   20G   1% /test
/dev/sdc1                 20G   44M   19G   1% /test1
[root@localhost ~]#

1.3 	Vsftpd服务实战讲解
FTP（文件传输协议），基于客户端/服务端模式（c/s），默认使用20,21端口，20端口（数据端口）进行数据传输，21端口（控制端口）用于ftp控制链接命令执行，ftp服务器普遍部署在内网，支持文件传输和共享。FTP服务基于tcp协议运行。
FTP的主流软件：VSFTPD，server-Uftp，FZ，wuftpd。
Vsftpd（very secure ftp doemon）非常安全的ftp服务。
Vsftpd基于GPL开源协议，可以实现匿名用户，系统用户，虚拟用户三种用户模式。
	匿名用户是最不安全的一种用户模式，任何人都可以无需通过验证来访问匿名用户ftp服务器。
	本地用户模式，比匿名用户更安全些，本地用户模式开启之后必须在本地存在此用户。
	虚拟用户模式，虚拟用户就是没有真实的用户存在，通过映射一个ftp认可的本地用户及设置相应的权限来完成验证，真实用户是不能登录Linux系统的，比以上两种用户更加可靠。
Vsftpd服务器端安装有两种方法，一是基于YUM方式安装，而是基于源码编译安装，最终实现效果完全一致，本文采用YUM安装Vsftpd，
yum install vsftpd*  -y
 
 
 
 

Yum install 安装的服务默认都会在/var/log，生成一个log日志
 
 
以上三个参数代表匿名用户的上传和创建目录、写入权限
 

系统用户模式
 
 
 
